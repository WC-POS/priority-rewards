import { BrowserWindow, app, ipcMain } from "electron";
// eslint-disable-next-line import/no-unresolved
import { Config, DefaultConfig, IPCChannels, Status } from "./types";
import { Connection, createConnection, getConnection } from "typeorm";

import CryptoJS from "crypto-js";
import { SyncError } from "./models/sync-error";
import { SyncHistory } from "./models/sync-history";
import { SyncUpload } from "./models/sync-upload";
import { entities } from "futurepos-typed-models";
import fs from "fs";
import getMAC from "getmac";
import path from "path";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 675,
    width: 800,
    minHeight: 675,
    minWidth: 550,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

function decryptConfig(data: Config) {
  return {
    ...data,
    cloud: {
      ...data.cloud,
      privateKey: CryptoJS.AES.decrypt(
        data.cloud.privateKey,
        getMAC()
      ).toString(CryptoJS.enc.Utf8),
    },
    fpos: {
      ...data.fpos,
      password: CryptoJS.AES.decrypt(data.fpos.password, getMAC()).toString(
        CryptoJS.enc.Utf8
      ),
    },
    email: {
      ...data.email,
      password: CryptoJS.AES.decrypt(data.email.password, getMAC()).toString(
        CryptoJS.enc.Utf8
      ),
    },
  } as Config;
}

function encrpytConfig(data: Config) {
  return {
    ...data,
    cloud: {
      ...data.cloud,
      privateKey: CryptoJS.AES.encrypt(
        data.cloud.privateKey,
        getMAC()
      ).toString(),
    },
    fpos: {
      ...data.fpos,
      password: CryptoJS.AES.encrypt(data.fpos.password, getMAC()).toString(),
    },
    email: {
      ...data.email,
      password: CryptoJS.AES.encrypt(data.email.password, getMAC()).toString(),
    },
  } as Config;
}

async function readConfig() {
  const configPath = path.join(app.getPath("userData"), "config.json");
  let data;
  try {
    data = decryptConfig(
      JSON.parse((await fs.promises.readFile(configPath)).toString()) as Config
    );
  } catch (err) {
    console.log(err);
    data = { ...DefaultConfig };
    await writeConfig(data);
  }
  return data;
}

async function writeConfig(data: Config) {
  const configPath = path.join(app.getPath("userData"), "config.json");
  await fs.promises.writeFile(
    configPath,
    JSON.stringify(encrpytConfig(data), null, 4)
  );
}

ipcMain.handle(IPCChannels.CONNECT_FPOS, async () => {
  let connection: Connection | undefined;
  try {
    connection = getConnection("FPOS");
    if (!connection.isConnected) {
      throw new Error("DB is disconnected");
    }
    return { isConnected: true, name: "FPOS" } as Status;
  } catch (_) {
    const config = await readConfig();
    const instanceName = config.fpos.host.includes("\\")
      ? config.fpos.host.split("\\")[1]
      : "CESSQL";
    try {
      connection = await createConnection({
        name: "FPOS",
        type: "mssql",
        host: config.fpos.host,
        username: config.fpos.user,
        password: config.fpos.password,
        database: config.fpos.db,
        entities,
        synchronize: false,
        port: 1433,
        extra: {
          encrypt: false,
          instanceName,
        },
      });
      return { isConnected: true, name: "FPOS" } as Status;
    } catch (connectionError) {
      console.log(connectionError);
      return { isConnected: false, name: "FPOS" } as Status;
    }
  }
});

ipcMain.handle(IPCChannels.CONNECT_LOG, async () => {
  let connection: Connection | undefined;
  try {
    connection = getConnection("LOG");
    if (!connection.isConnected) {
      throw new Error("LOG DB is disconnected");
    }
    return { isConnected: true, name: "LOG" } as Status;
  } catch (_) {
    try {
      connection = await createConnection({
        name: "LOG",
        type: "better-sqlite3",
        database: path.join(app.getPath("userData"), "data.db"),
        entities: [SyncHistory, SyncError, SyncUpload],
      });
      return {
        isConnected: true,
        name: "LOG",
      } as Status;
    } catch (connectionError) {
      console.log(connectionError);
      return { isConnected: false, name: "LOG" } as Status;
    }
  }
});

ipcMain.handle(IPCChannels.GET_CONFIG, () => {
  return readConfig();
});

ipcMain.handle(IPCChannels.SET_CONFIG, async (_, data: Config) => {
  await writeConfig(data);
  return readConfig();
});
